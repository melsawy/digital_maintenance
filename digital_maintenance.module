<?php


/**
 * Implements hook_menu().
 */
function digital_maintenance_menu() {
  $items = array();
  $items['dm_createtask/%ctools_js'] = array(
    'title' => t('Create Task'),
    'page callback' => 'ctools_ajax_modal_createtask',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
  );
  return $items;
}

/**
 * Implements of hook_block_info().
 */
function digital_maintenance_block_info() {
  $blocks['dm_top_menu_links'] = array(
    'info' => t('Show digital maintenance top links'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function digital_maintenance_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'dm_top_menu_links':
      $block['content'] = _dm_show_top_links();
      break;
  }
  return $block;
}

function _dm_show_top_links() {
   // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // create CTools' javascript to the page.
  ctools_modal_add_js();
  $links = array();
  $links[] = ctools_modal_text_button(t('Create New Task'), 'dm_createtask/nojs', t('Create task'));
  $form['dm_views'] = array(
    '#type' => 'select',
    '#title' => t('Views: '),
    '#options' => array(t('Budget'), t('Task list')),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $links[] = drupal_render($form);
  //$links[] = l(t('Vis Stamdata'), '<front>');
  //$links[] = l(t('schaffolding'), '<front>');
  $output = theme('item_list', array('items' => $links, 'title' => '', 'attributes' => array('class' => 'dm-top-links')));
  return $output;
}
/**
* Implements hook_form_FORM_ID_alter().
*/
function digital_maintenance_form_dm_task_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_dm_sub_category_prefix']['#prefix'] = '<div class="container-inline dm-group-subcategory-fields">';
  $form['field_dm_sub_category']['#suffix'] = '</div>';
  $form['field_dm_sub_category'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
  //Hide type/title fields and set their values via hook_node_presave().
  //@see digital_maintenance_node_presave().
  $form['field_dm_task_type']['#access'] = FALSE;
  //$form['title']['#required'] = FALSE;
  //$form['title']['#access'] = FALSE;
  //Set allowed values for year to perform task +10 from current year.
  $current_year = date('Y');
  $query = db_select('taxonomy_vocabulary', 'tv');
  $query->join('taxonomy_term_data', 'td', 'tv.vid = td.vid');
  $query->fields('td', array('tid', 'name'));
  $query->condition('tv.machine_name', 'dm_year_to_perform_task');
  $query->condition('td.name', array($current_year, $current_year + 10), 'BETWEEN');
  $query->orderBy('td.name');
  $options = $query->execute()->fetchAllKeyed(0, 1);
  $options = array('_none' => '- Select a value -') + $options;
  $form['field_dm_year_to_perform_task'][LANGUAGE_NONE]['#options'] = $options;
  if (isset($_POST['js']) || isset($_POST['ajax_html_ids'])) {
    $form['actions']['submit']['#submit'][] = '_create_task_submit';
  }
}

function _create_task_submit($form, &$form_state) {
  // Call the rest of submits, because after this submit script will end.
  $submits = $form['actions']['submit']['#submit'];
  // Find the rest of submits.
  foreach ($submits as $key => $item) {
    unset($submits[$key]);
    if ($item == '_create_task_submit') {
      break;
    }
  }
  // Call it.
  foreach ($submits as $function) {
    if (function_exists($function)) {
      $function($form, $form_state);
    }
  }
  // Redirect to destination, if set, or to node path.
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    _createtask_ajax_redirect($destination['destination']);
  }
  else if (isset($form_state['redirect'])) {
    _createtask_ajax_redirect($form_state['redirect']);
  }
}

function _createtask_ajax_redirect($path) {
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_ajax_command_redirect($path);
  print ajax_render($commands);
  exit();
}

function ctools_ajax_modal_createtask($ajax) {
  $callback = 'node_add';
  $args = array('dm_task');
  $_GET['q'] = 'node/add/dm-task';
  include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
  if (function_exists($callback)) {
    $output = call_user_func_array($callback, $args);
    if ($ajax) {
      ctools_include('modal');
      ctools_include('ajax');
      if (is_array($output)) {
        $output = drupal_render($output);
      }
      $title = drupal_get_title();
      // If there are messages for the form, render them.
      if ($messages = theme('status_messages')) {
        $output = '<div class="messages">' . $messages . '</div>' . $output;
      }
      $command = array();
      $command[] = ctools_modal_command_display($title, $output);
      $commands = $command;
      if (empty($commands)) {
        $commands[] = ctools_modal_command_loading();
        if (!empty($_GET['destination'])) {
          $commands[] = ctools_ajax_command_redirect($_GET['destination']);
        }
      }
      print ajax_render($commands);
      exit();
    }
    else {
      return $output;
    }
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Implements of hook_views_query_alter().
 */
function digital_maintenance_views_query_alter(&$view, &$query) {
  if ($view->name == 'tasks_annual_overview') {
    //change exposed task list filter to be BETWEEN instead on original = operator.
    if (isset($view->query->where[1]['conditions'][1])) {
      $view->query->where[1]['conditions'][1]['operator'] = 'BETWEEN';
      $view->query->where[1]['conditions'][1]['value'] = array($_GET['name'], $_GET['to_year']);
    }
  }
  if ($view->name == 'dm_task_list_row' && $view->current_display == 'attachment_1') {
    //append to tasks list all tasks[with Year to perform task + Maintenance interval] that match displayed annual year
    //for example if I have a tasks that have year to perform task = 2013 and Maintenance interval = 1 
    //so I should display this task when listing annual year = 2014
    $key_id = current(array_keys($view->query->where[0]['conditions'][0]['value']));
    $tid = $view->query->where[0]['conditions'][0]['value'][$key_id];
    $term_data = entity_load('taxonomy_term', array($tid));
    $year = $term_data[$tid]->name;
    $scosts = _dm_get_subsequent_cost();
    $tasks_nids = isset($scosts[$year]) ? explode(',', $scosts[$year]->nids) : array(0);
    $view->query->where[0]['conditions'][0]['field'] = "node.nid IN($key_id)";
    $view->query->where[0]['conditions'][0]['value'][$key_id] = $tasks_nids;
  }
}

/**
 * Implements of hook_form_alter().
 */
function digital_maintenance_form_views_exposed_form_alter(&$form, &$form_state) {
  //alter exposed filter for task list view to add [to] field.
  //original exposed filter expose on text filed
  //will alter views query to add this value to query
  //@see digital_maintenance_views_query_alter().
  if ($form['#id'] == 'views-exposed-form-tasks-annual-overview-page') {
    $form['name']['#size'] = 5;
    $form['to_year'] = array(
      '#type' => 'textfield', 
      '#title' => t('To'),
      '#size' => 5,
    );
  }
}

/**
 * Implements of hook_views_pre_render().
 */
function digital_maintenance_views_pre_render(&$view) {
  if ($view->name == 'tasks_annual_overview') {
    //override taxonomy description to list SUM on tasks cost.
    $scosts = _dm_get_subsequent_cost();
    $mcosts = _dm_get_maintenance_cost();
    foreach($view->result as &$row) {
      $total_cost = 0;
      $total_cost += isset($mcosts[$row->taxonomy_term_data_name]) ? $mcosts[$row->taxonomy_term_data_name]->mcost : 0;
      $total_cost += isset($scosts[$row->taxonomy_term_data_name]) ? $scosts[$row->taxonomy_term_data_name]->scost : 0;
      //$row->taxonomy_term_data_description = isset($scosts[$row->taxonomy_term_data_name]) ? $scosts[$row->taxonomy_term_data_name]->scost : NULL;
      $row->taxonomy_term_data_description = $total_cost;
    }
  }
}

/**
 * Group all tasks with same [Year to perform task + Maintenance interval]
 * return associative array with key = year and fileds 
 * 'dm_year' => annual year.
 * 'scost' => sum of subsequent cost to all corresponding tasks.
 * 'nids' => tasks nids separated by ','
 */
function _dm_get_subsequent_cost($year = 'ALL') {
  //TODO: cache query result for 5 min at least.
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('field_data_field_dm_year_to_perform_task', 'ypt', 'td.tid = ypt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_interval', 'mi', 'ypt.entity_id = mi.entity_id');
  $query->join('field_data_field_dm_subsequent_cost', 'sc', 'ypt.entity_id = sc.entity_id');
  //$query->join('node', 'n', 'ypt.entity_id = n.nid');
  $query->addExpression("mi.field_dm_maintenance_interval_value + td.name", 'dm_year');
  //$query->addExpression("GROUP_CONCAT(CONCAT('l(\"', n.title, '\", \"node/', n.nid, '\")') SEPARATOR ',')", 'node_links');
  $query->addExpression("GROUP_CONCAT(ypt.entity_id SEPARATOR ',')", 'nids');
  $query->addExpression("SUM(sc.field_dm_subsequent_cost_value)", 'scost');
  $query->groupBy('dm_year');
  $query->orderBy('dm_year');
  $result = $query->execute()->fetchAllAssoc('dm_year');
  if ($year == 'ALL') {
    return $result;
  }
  if(isset($result[$year])) {
    return $result[$year];
  }
  return array();
}

/**
 * Function to SUM 1st Maintenance cost for each year
 *
 */
function _dm_get_maintenance_cost($year = 'ALL') {
  //TODO: cache query result for 5 min at least.
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('field_data_field_dm_year_to_perform_task', 'ypt', 'td.tid = ypt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_cost', 'mc', 'ypt.entity_id = mc.entity_id');
  $query->addField('td', 'name');
  $query->addExpression("SUM(mc.field_dm_maintenance_cost_value)", 'mcost');
  $query->groupBy('name');
  $query->orderBy('name');
  $result = $query->execute()->fetchAllAssoc('name');
  if ($year == 'ALL') {
    return $result;
  }
  if(isset($result[$year])) {
    return $result[$year];
  }
  return array();
}

/**
 * Implements of hook_node_validate().
 */
function digital_maintenance_node_validate($node, $form, &$form_state) {
  if ($node->type == 'dm_task') {
    //Validation for sub category to be on format [$category_value].[value]
    $cat = $node->field_dm_category[LANGUAGE_NONE][0]['value'];
    $subcat_prefix = $node->field_dm_sub_category_prefix[LANGUAGE_NONE][0]['value'];
    if(!empty($cat) && !empty($subcat_prefix)) {
      $prefix_values = explode('.', $subcat_prefix);
      if (count($prefix_values) < 2 || $prefix_values[0] != $cat) {
        form_set_error('field_dm_sub_category_prefix', t('Sub category value should be on format @value.[value].', array('@value' => $cat)));
      }
    }
    //Validation for Maintenance/Inspection tasks
    $minterval = $node->field_dm_maintenance_interval[LANGUAGE_NONE][0]['value'];
    if ($minterval) {
      //User should add maintenance cost and subsequent maintenance cost
      if (!$node->field_dm_maintenance_cost[LANGUAGE_NONE][0]['value']) {
        form_set_error('field_dm_maintenance_cost', t('Maintenance cost field is required'));
      }
      if (!$node->field_dm_subsequent_cost[LANGUAGE_NONE][0]['value']) {
        form_set_error('field_dm_subsequent_cost', t('Subsequent maintenance cost field is required'));
      }
    }
  }
}

/**
 * Implements of hook_node_presave().
 */
function digital_maintenance_node_presave($node) {
  if ($node->type == 'dm_task') {
    //Set unique node title value [category + current timestamp]
    //$field = field_info_field('field_dm_category');
    //$allowed_values = list_allowed_values($field);
    //$node->title = $allowed_values[$node->field_dm_category[LANGUAGE_NONE][0]['value']];
    //Set task type based on maintenance interval field.
    if (isset($node->field_dm_maintenance_interval[LANGUAGE_NONE][0])) {
      //Task is Maintenance
      $node->field_dm_task_type[LANGUAGE_NONE][0]['value'] = 0;
    }
    else {
      //Task is Inspection
      $node->field_dm_task_type[LANGUAGE_NONE][0]['value'] = 1;
      //Remove costs as task is Inspection.
      $node->field_dm_maintenance_cost[LANGUAGE_NONE][0]['value'] = $node->field_dm_subsequent_cost[LANGUAGE_NONE][0]['value'] = 0;
    }
  }
}
