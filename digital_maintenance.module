<?php


/**
 * Implements hook_menu().
 */
function digital_maintenance_menu() {
  $items = array();
  $items['dm_createtask/%ctools_js'] = array(
    'title' => t('Create Task'),
    'page callback' => 'ctools_ajax_modal_createtask',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
  );
  $items['dm_costs_oxy/%/%'] = array(
    'title' => t('Calculate cost for specific year'),
    'page callback' => 'ctools_ajax_cost_oxy',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ); 
  $items['dm_masterdata/%ctools_js'] = array(
    'title' => t('Stamdata'),
    'page callback' => 'ctools_ajax_modal_stamdata',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page arguments' => array(1),
  );
  return $items;
}

function ctools_ajax_modal_stamdata($ajax) {
  if ($ajax) {
    ctools_include('modal');
    ctools_include('ajax');
    $title = t('Master data');
    $output = t('x year period: @years years', array('@years' => variable_get('dm_x_year_period', 7)));
    $command = array();
    $command[] = ctools_modal_command_display($title, $output);
    $commands = $command;
    if (empty($commands)) {
      $commands[] = ctools_modal_command_loading();
      if (!empty($_GET['destination'])) {
        $commands[] = ctools_ajax_command_redirect($_GET['destination']);
      }
    }
    print ajax_render($commands);
    exit();
  }
  else {
    return $output;
  }
}

function ctools_ajax_cost_oxy($action, $lyear) {
  $year = ($action == 'next') ? $lyear + 1 : $lyear - 1;
  $oxy_nids = $_POST['oxy_nids'];
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('field_data_field_dm_year_to_perform_task', 'pt', 'td.tid = pt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_cost', 'mc', 'pt.entity_id = mc.entity_id');
  $query->join('field_data_field_dm_maintenance_interval', 'mi', 'pt.entity_id=mi.entity_id');
  $query->join('field_data_field_dm_subsequent_cost', 'sc', 'pt.entity_id=sc.entity_id');
  $query->addField('pt', 'entity_id', 'nid');
  $query->addField('td', 'name', 'year');
  $query->addField('mc', 'field_dm_maintenance_cost_value', 'mcost');
  $query->addField('sc', 'field_dm_subsequent_cost_value', 'scost');
  $query->condition('pt.entity_id', $oxy_nids, 'IN');
  $query->condition('td.name', $year, '<=');
  $query->where('MOD((:year - td.name), mi.field_dm_maintenance_interval_value) = 0', array(':year' => $year));
  $result = $query->execute()->fetchAllAssoc('nid');
  $output["th.data-year-$lyear"] = "'<th class='data-year data-year-$year'>$year</th>'";
  $total = 0;
  foreach ($oxy_nids as $nid) {
    if (array_key_exists($nid, $result)) {
      $cost =  ($result[$nid]->year == $year) ? $result[$nid]->mcost : $result[$nid]->scost;
    }
    else {
      $cost = 0;
    }
    $total += $cost;
    $output["'tr.data-nid-$nid td.data-year-$lyear'"] = "'<td class='data-year data-year-$year'>$cost</td>'";
  }
  //add Total for col.
  $output["'tr.dm-oxy-total-row td.data-year-$lyear'"] = "'<td class='data-year data-year-$year'>$total</td>'";
  drupal_json_output($output);
}

function dm_draw_x_year_graph($data) {
  $keys = array_keys($data);
  foreach($keys as $k) {
    $header[$k] = "$k";
  }
  $settings = array();
  $settings['chart']['chartOne'] = array(
    'header' => $header,
    'rows' => array($data),
    'columns' => array(t('Total cost')),
    'chartType' => 'AreaChart',//GOOGLE_CHART_TOOLS_DEFAULT_CHART,
    'containerId' =>  'area_chart',
    'options' => array( // Optionals.
      //'curveType' => "function",
      'forceIFrame' => FALSE,
      'title' => '',
      'width' => 800,
      'height' => 355,
      'colors' => array('#87B200'),
    )
  );
  draw_chart($settings);
  return '<div class="dm-graph-container">
    <div id="area_chart"></div>
    </div>';
}


function _dm_show_cost_overxyears() {
  $field = field_info_field('field_dm_category');
  $allowed_values = list_allowed_values($field);
  //Prepare table header
  //prev and next will be bind with onclick action
  //add loading class to prev and next to show while executing ajax request 
  $prev = array('data' => '<div class="dm-apply"></div><div class="dm-loading"></div>', 'class' => array('dm-year-prev'));
  $fheader = array(t('#  Category'), t('Priority'), $prev);
  //List x years from current one
  $x_year = variable_get('dm_x_year_period', 7);
  $cyear = date('Y');
  $eyear = $cyear + $x_year;
  for ($i = $cyear; $i < $eyear; $i++) {
    $mheader[] = array('data' => $i , 'class' => array('data-year', 'data-year-'. $i));
  }
  $next = array('data' => '<div class="dm-apply"></div><div class="dm-loading"></div>', 'class' => array('dm-year-next'));
  $lheader = array($next, t('SUM'));
  $header = array_merge($fheader, $mheader, $lheader);
  //Built query to collect table rows
  $query = db_select('node', 'n');
  $query = $query->extend('PagerDefault')->limit(20);
  $query->fields('n', array('nid', 'title'));
  $query->addField('td', 'name', 'year');
  $query->addField('mc', 'field_dm_maintenance_cost_value', 'mcost');
  $query->addField('fc', 'field_dm_category_value', 'category');
  $query->addField('cp', 'field_dm_sub_category_prefix_value', 'category_prefix');
  $query->addField('fp', 'field_dm_priority_value', 'priority');
  $query->addField('sc', 'field_dm_subsequent_cost_value', 'scost'); 
  $query->join('field_data_field_dm_category', 'fc', 'n.nid = fc.entity_id');
  $query->join('field_data_field_dm_year_to_perform_task', 'pt', 'n.nid = pt.entity_id');
  $query->join('taxonomy_term_data', 'td', 'td.tid = pt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_cost', ' mc', 'n.nid = mc.entity_id');
  $query->join('field_data_field_dm_sub_category_prefix', 'cp', 'n.nid = cp.entity_id');
  $query->join('field_data_field_dm_priority', 'fp', 'n.nid = fp.entity_id');
  $query->join('field_data_field_dm_maintenance_interval', 'mi', 'n.nid = mi.entity_id');
  $query->join('field_data_field_dm_subsequent_cost', 'sc', 'n.nid = sc.entity_id');
  $query->orderBy('fc.field_dm_category_value');
  if (isset($_GET['schaffolding'])) {
    $query->join('field_data_field_dm_scaffolding_needed', 'sn', 'n.nid = sn.entity_id');
    $query->condition('sn.field_dm_scaffolding_needed_value', 1);
  }
  //add column for each year on our x_year period
  //use MOD to list define maintenance task on each col.
  foreach ($mheader as $h) {
    $year = $h['data'];
    $query->addExpression("MOD(($year - td.name), mi.field_dm_maintenance_interval_value)", "y_$year");
  }
  $results = $query->execute()->fetchAllAssoc('nid');
  $oxy_nids = array_keys($results);
  drupal_add_js("var oxy_nids = ". json_encode(array_keys($results)) .";", 'inline');
  //rebuild query result array to group all rows with same category
  $all_category = array();
  foreach($results as $data) {
    $all_category[$data->category][$data->nid] = $data;
  }
   //Add tables row
  $rows = array();
  $colsum = array();
  $total = 0;
  foreach ($all_category as $key => $result) {
    //add row for category title
    $row = array();
    $row[] = array('data' => $allowed_values[$key], 'colspan' => count($header) - 1);
    $row[] = array('data' => '', 'class' => array('dm-sum-task-empty'));
    $rows[] = array('data' => $row, 'class' => array('dm-category-title'));
    //add category tasks.
    foreach ($result as $data) {
      $row = array();
      $sum = 0;
      $title = '<div class="dm-cat-prefix"></div>'. $data->category_prefix .' '. $data->title;
      $priority = _dm_priority_html($data->priority);
      foreach ($mheader as $hdata) {
        $year = $hdata['data'];
        if ($data->{"y_$year"} == 0 && $year >= $data->year) {
          //get maintenance or subsequent cost
          $cost = ($year == $data->year) ? $data->mcost : $data->scost;
        }
        else {
          $cost = 0;
        }
        $sum += $cost;
        $row[] = array('data' => $cost, 'class' => array('data-year', 'data-year-'. $year));
        //add colsum
        if (isset($colsum[$year])) {
          $colsum[$year] = $colsum[$year] + $cost;
        }
        else {
          $colsum[$year] = $cost;
        }
      }
      $total += $sum;
      array_unshift($row, $title, $priority, '');
      $row[] = '';
      $row[] = array('data' => $sum, 'class' => array('dm-sum-task', 'dm-sum-nid-'.$data->nid));
      $rows[] = array('data' => $row, 'class' => array('data-task', 'data-nid-'. $data->nid));
    }
  }
  //Add last row[TOTAL]
  $row = array();
  $row[] = array('data' => t('Total'), 'colspan' => 3, 'class' => array('dm-oxy-total-label'));
  foreach ($mheader as $hdata) {
    $year = $hdata['data'];
    $row[] = array('data' => $colsum[$year], 'class' => array('data-year-'.$year));
  }
  //add total sum
  $row[] = '';
  $row[] = array('data' => $total, 'class' => array('dm-overalltotal'));
  $rows[] = array('data' => $row, 'class' => array('dm-oxy-total-row'));
  $output = theme('table', array('header' => $header, 'rows' => $rows, '#attributes' => array('class' => array('dm-oxy-tasks'))));
  $output .= theme('pager');
  return $output;
}

/**
 * Implements of hook_block_info().
 */
function digital_maintenance_block_info() {
  $blocks['dm_top_menu_links'] = array(
    'info' => t('Show Digital Maintenance Links'),
  );
  $blocks['dm_expense'] = array(
    'info' => t('Show Expense'),
  );
  $blocks['dm_cost_overxyears'] = array(
    'info' => t('Show Cost over X years'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function digital_maintenance_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'dm_top_menu_links':
      $block['content'] = _dm_show_top_links();
      break;
    case 'dm_expense':
      $block['content'] = _dm_show_expense();
      break;
    case 'dm_cost_overxyears':
      $block['content'] = _dm_show_cost_overxyears();
      break;
  }
  return $block;
}

function _dm_show_expense() {
  $items = $cost = array();
  $mcost = _dm_get_maintenance_cost();
  $cyear = date('Y');
  $x_year = variable_get('dm_x_year_period', 7);
  $eyear = $cyear + $x_year;
  for ($i = $cyear; $i < $eyear; $i++) {
    $scost = _dm_get_subsequent_cost($i);
    $y_cost = isset($mcost[$i]) ? $mcost[$i] : 0;
    $y_cost += isset($scost->scost) ? $scost->scost : 0;
    $cost[$i] = $y_cost;
  }
  //MAX VALUE
  $max = max($cost);
  $year = array_search($max, $cost);
  $items[] = '<div class="dm-expense-value">' . $max . '</div><div class="dm-expense-text">'. t('Highest expense @year', array('@year' => $year)) . '</div>';
  //MIN VALUE
  $min = min($cost);
  $year = array_search($min, $cost);
  $items[] = '<div class="dm-expense-value">' . $min . '</div><div class="dm-expense-text">'. t('Lowest expense @year', array('@year' => $year)) . '</div>';
  //AVG VALUE
  $avg = array_sum($cost)/$x_year;
  $items[] = '<div class="dm-expense-value">' . ceil($avg) . '</div><div class="dm-expense-text">'. t('Average annual expense') . '</div>';
  $output = '';
  $output .= dm_draw_x_year_graph($cost);
  $output .= '<div class="dm-expense-container">' .
    theme('item_list', array('items' => $items, 'title' => '', 'attributes' => array('class' => 'dm-expense-data'))) .'</div>';
  return $output;
}

function _dm_show_top_links() {
  //Add dm css/js
  drupal_add_css(drupal_get_path('module', 'digital_maintenance') . '/css/digital_maintenance.css');
  drupal_add_js(drupal_get_path('module', 'digital_maintenance') . '/js/digital_maintenance.js');
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');
  // create CTools' javascript to the page.
  ctools_modal_add_js();
  // Create our own javascript that will be used to theme a modal.
  $sample_style = array(
    'ctools-dm-style' => array(
      'modalSize' => array(
        /*
        'type' => 'scale',
        'width' => .5,
        'height' => '100%',
        'addWidth' => 200,
        'addHeight' => 0,
         */
        // How much to remove from the inner content to make space for the
        // theming.
        'contentRight' => 25,
        'contentBottom' => 45,
        'type' => 'fixed',
        'width' => 500,
        'height' => 500,
        'addWidth' => 20,
        'addHeight' => 0,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CToolsSampleModal',
      'throbber' => theme('image', array('path' => ctools_image_path('ajax-loader.gif', 'digital_maintenance'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
  );

  drupal_add_js($sample_style, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('ctools-ajax-dm', 'digital_maintenance');
  ctools_add_css('ctools-ajax-dm', 'digital_maintenance');

  $links = array();
  $links[] = ctools_modal_text_button(t('Create New Task'), 'dm_createtask/nojs', t('Create New Task'), 'ctools-modal-ctools-dm-style');
  $form['dm_views'] = array(
    '#type' => 'select',
    '#title' => t('Views: '),
    '#options' => array('dm-frontpage' => t('Budget'), 'dm-annual-overview' => t('Task list')),
    '#value' => arg(0),
    '#prefix' => '<div class="container-inline dm-taskview-list">',
    '#suffix' => '</div>',
  );
  $links[] = drupal_render($form);
  //empty diff for number of year on task list view.
  $links[] = '<div class="dm-num-year"></div>';
  $links[] = ctools_modal_text_button(t('Vis Stamdata'), 'dm_masterdata/nojs', t('Vis Stamdata'), 'ctools-modal-ctools-dm-style');
  $l_query = array('schaffolding' => 1);
  $sf_class = 'dm-schaffolding-no'; 
  if (isset($_GET['schaffolding'])) {
    $l_query = array(); 
    $sf_class = 'dm-schaffolding-yes'; 
  }
  $links[] = l(t('schaffolding'), arg(0), array('attributes' => array('class' => array($sf_class)),
    'query' => $l_query));

  $output = theme('item_list', array('items' => $links, 'title' => '', 'attributes' => array('class' => 'dm-top-links')));
  return $output;
}
/**
* Implements hook_form_FORM_ID_alter().
*/
function digital_maintenance_form_dm_task_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_dm_sub_category_prefix']['#prefix'] = '<div class="container-inline dm-group-subcategory-fields">';
  $form['field_dm_sub_category']['#suffix'] = '</div>';
  $form['field_dm_sub_category'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
  //Hide type/title fields and set their values via hook_node_presave().
  //@see digital_maintenance_node_presave().
  $form['field_dm_task_type']['#access'] = FALSE;
  //$form['title']['#required'] = FALSE;
  //$form['title']['#access'] = FALSE;
  //Set allowed values for year to perform task +10 from current year.
  $current_year = date('Y');
  $query = db_select('taxonomy_vocabulary', 'tv');
  $query->join('taxonomy_term_data', 'td', 'tv.vid = td.vid');
  $query->fields('td', array('tid', 'name'));
  $query->condition('tv.machine_name', 'dm_year_to_perform_task');
  $query->condition('td.name', array($current_year, $current_year + 10), 'BETWEEN');
  $query->orderBy('td.name');
  $options = $query->execute()->fetchAllKeyed(0, 1);
  $options = array('_none' => '- Select a value -') + $options;
  $form['field_dm_year_to_perform_task'][LANGUAGE_NONE]['#options'] = $options;
  if (isset($_POST['js']) || isset($_POST['ajax_html_ids'])) {
    $form['actions']['submit']['#submit'][] = '_create_task_submit';
  }
}

function _create_task_submit($form, &$form_state) {
  // Call the rest of submits, because after this submit script will end.
  $submits = $form['actions']['submit']['#submit'];
  // Find the rest of submits.
  foreach ($submits as $key => $item) {
    unset($submits[$key]);
    if ($item == '_create_task_submit') {
      break;
    }
  }
  // Call it.
  foreach ($submits as $function) {
    if (function_exists($function)) {
      $function($form, $form_state);
    }
  }
  // Redirect to destination, if set, or to node path.
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    _createtask_ajax_redirect($destination['destination']);
  }
  else if (isset($form_state['redirect'])) {
    _createtask_ajax_redirect($form_state['redirect']);
  }
}

function _createtask_ajax_redirect($path) {
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands[] = ctools_modal_command_dismiss();
  $commands[] = ctools_ajax_command_redirect($path);
  print ajax_render($commands);
  exit();
}

function ctools_ajax_modal_createtask($ajax) {
  $callback = 'node_add';
  $args = array('dm_task');
  $_GET['q'] = 'node/add/dm-task';
  include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
  if (function_exists($callback)) {
    $output = call_user_func_array($callback, $args);
    if ($ajax) {
      ctools_include('modal');
      ctools_include('ajax');
      if (is_array($output)) {
        $output = drupal_render($output);
      }
      $title = drupal_get_title();
      // If there are messages for the form, render them.
      if ($messages = theme('status_messages')) {
        $output = '<div class="messages">' . $messages . '</div>' . $output;
      }
      $command = array();
      $command[] = ctools_modal_command_display($title, $output);
      $commands = $command;
      if (empty($commands)) {
        $commands[] = ctools_modal_command_loading();
        if (!empty($_GET['destination'])) {
          $commands[] = ctools_ajax_command_redirect($_GET['destination']);
        }
      }
      print ajax_render($commands);
      exit();
    }
    else {
      return $output;
    }
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Implements of hook_views_query_alter().
 */
function digital_maintenance_views_query_alter(&$view, &$query) {
  if ($view->name == 'tasks_annual_overview') {
    //change exposed task list filter to be BETWEEN instead on original = operator.
    if (isset($view->query->where[1]['conditions'][1])) {
      $view->query->where[1]['conditions'][1]['operator'] = 'BETWEEN';
      $view->query->where[1]['conditions'][1]['value'] = array($_GET['name'], $_GET['to_year']);
    }
  }
  if ($view->name == 'dm_task_list_row' && in_array($view->current_display, array('attachment_1', 'attachment_2'))) {
    $key_id = current(array_keys($view->query->where[0]['conditions'][0]['value']));
    $year = $view->query->where[0]['conditions'][0]['value'][$key_id];
    $tasks = _dm_get_subsequent_cost($year, 'tasks');
    if ($view->current_display == 'attachment_1') {
      $tasks_nids = count($tasks['mtasks']) ? $tasks['mtasks'] : array(0);
    }
    else {
      $tasks_nids = count($tasks['itasks']) ? $tasks['itasks'] : array(0);
    }
    $view->query->where[0]['conditions'][0]['field'] = "node.nid IN($key_id)";
    $view->query->where[0]['conditions'][0]['value'][$key_id] = $tasks_nids;
  }
}

/**
 * Implements of hook_form_alter().
 */
function digital_maintenance_form_views_exposed_form_alter(&$form, &$form_state) {
  //alter exposed filter for task list view to add [to] field.
  //original exposed filter expose on text filed
  //will alter views query to add this value to query
  //@see digital_maintenance_views_query_alter().
  if ($form['#id'] == 'views-exposed-form-tasks-annual-overview-page') {
    $form['#prefix'] = '<div class="container-inline">';
    $form['#suffix'] = '</div>';
    $form['name']['#size'] = 5;
    $form['to_year'] = array(
      '#type' => 'textfield', 
      '#title' => t('To'),
      '#size' => 5,
    );
  }
}

/**
 * Implements of hook_views_pre_render().
 */
function digital_maintenance_views_pre_render(&$view) {
  if ($view->name == 'tasks_annual_overview') {
    //override taxonomy description to list SUM on tasks cost.
    $mcosts = _dm_get_maintenance_cost();
    foreach($view->result as &$row) {
      $scost = _dm_get_subsequent_cost($row->taxonomy_term_data_name);
      $total_cost = isset($mcosts[$row->taxonomy_term_data_name]) ? $mcosts[$row->taxonomy_term_data_name] : 0;
      $total_cost += isset($scost->scost) ? $scost->scost : 0;
      $row->taxonomy_term_data_description = $total_cost;
    }
  }
}

/**
 * 'scost' => sum of subsequent cost to all corresponding tasks.
 * 'nids' => tasks nids separated by ','
 */
function _dm_get_subsequent_cost($year, $type = 'mcost') {
  //TODO: cache query result for 5 min at least.
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('field_data_field_dm_year_to_perform_task', 'pt', 'td.tid = pt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_cost', 'mc', 'pt.entity_id = mc.entity_id');
  $query->join('field_data_field_dm_maintenance_interval', 'mi', 'pt.entity_id=mi.entity_id');
  $query->join('field_data_field_dm_subsequent_cost', 'sc', 'pt.entity_id=sc.entity_id');
  $query->condition('td.name', $year, '<');
  if (isset($_GET['schaffolding'])) {
    $query->join('field_data_field_dm_scaffolding_needed', 'sn', 'pt.entity_id = sn.entity_id');
    $query->condition('sn.field_dm_scaffolding_needed_value', 1);
  }
  if ($type == 'mcost') {
    $query->addExpression('SUM(sc.field_dm_subsequent_cost_value)', 'scost');
    $query->addExpression("GROUP_CONCAT(pt.entity_id SEPARATOR ',')", 'nids');
    $query->where('MOD((:year - td.name), mi.field_dm_maintenance_interval_value) = 0', array(':year' => $year));
    $result = $query->execute()->fetchObject();
  }
  else {
    $query->join('field_data_field_dm_inspection_interval', 'ii', 'pt.entity_id = ii.entity_id');
    $query->addField('pt', 'entity_id', 'nid');
    $query->addExpression('MOD((:year - td.name), mi.field_dm_maintenance_interval_value)', 'mmod', array(':year' => $year));
    //$query->addExpression('MOD((:year - td.name), ii.field_dm_inspection_interval_value)', 'imod', array(':year' => $year));
    $or = db_or();
    $or->where('MOD((:year - td.name), mi.field_dm_maintenance_interval_value) = 0', array(':year' => $year));
    $or->where('MOD((:year - td.name), ii.field_dm_inspection_interval_value) = 0', array(':year' => $year));
    $query->condition($or);
    $result = $query->execute()->fetchAll();
    $mtasks = $itasks = array();
    foreach ($result as $row) {
      if ($row->mmod == 0) {
        $mtasks[] = $row->nid;
      }
      else {
        $itasks[] = $row->nid;
      }
    }
    $result['mtasks'] = $mtasks;
    $result['itasks'] = $itasks;
  }
  return $result;
}

/**
 * Function to SUM 1st Maintenance cost for each year
 *
 */
function _dm_get_maintenance_cost($year = 'ALL') {
  //TODO: cache query result for 5 min at least.
  $query = db_select('taxonomy_term_data', 'td');
  $query->join('field_data_field_dm_year_to_perform_task', 'ypt', 'td.tid = ypt.field_dm_year_to_perform_task_tid');
  $query->join('field_data_field_dm_maintenance_cost', 'mc', 'ypt.entity_id = mc.entity_id');
  $query->addField('td', 'name');
  $query->addExpression("SUM(mc.field_dm_maintenance_cost_value)", 'mcost');
  $query->groupBy('name');
  $query->orderBy('name');
  if (isset($_GET['schaffolding'])) {
    $query->join('field_data_field_dm_scaffolding_needed', 'sn', 'ypt.entity_id = sn.entity_id');
    $query->condition('sn.field_dm_scaffolding_needed_value', 1);
  }
  $result = $query->execute()->fetchAllKeyed(0, 1);
  if ($year == 'ALL') {
    return $result;
  }
  if(isset($result[$year])) {
    return $result[$year];
  }
  return array();
}

/**
 * Implements of hook_node_validate().
 */
function digital_maintenance_node_validate($node, $form, &$form_state) {
  if ($node->type == 'dm_task') {
    //Validation for sub category to be on format [$category_value].[value]
    $cat = $node->field_dm_category[LANGUAGE_NONE][0]['value'];
    $subcat_prefix = $node->field_dm_sub_category_prefix[LANGUAGE_NONE][0]['value'];
    if(!empty($cat) && !empty($subcat_prefix)) {
      $prefix_values = explode('.', $subcat_prefix);
      if (count($prefix_values) < 2 || $prefix_values[0] != $cat) {
        form_set_error('field_dm_sub_category_prefix', t('Sub category value should be on format @value.[value].', array('@value' => $cat)));
      }
    }
    //Validation for Maintenance/Inspection tasks
    $minterval = $node->field_dm_maintenance_interval[LANGUAGE_NONE][0]['value'];
    if ($minterval) {
      //User should add maintenance cost and subsequent maintenance cost
      if (!$node->field_dm_maintenance_cost[LANGUAGE_NONE][0]['value']) {
        form_set_error('field_dm_maintenance_cost', t('Maintenance cost field is required'));
      }
      if (!$node->field_dm_subsequent_cost[LANGUAGE_NONE][0]['value']) {
        form_set_error('field_dm_subsequent_cost', t('Subsequent maintenance cost field is required'));
      }
    }
  }
}

/**
 * Implements of hook_node_presave().
 */
function digital_maintenance_node_presave($node) {
  if ($node->type == 'dm_task') {
    //Set unique node title value [category + current timestamp]
    //$field = field_info_field('field_dm_category');
    //$allowed_values = list_allowed_values($field);
    //$node->title = $allowed_values[$node->field_dm_category[LANGUAGE_NONE][0]['value']];
    //Set task type based on maintenance interval field.
    if (isset($node->field_dm_maintenance_interval[LANGUAGE_NONE][0])) {
      //Task is Maintenance
      $node->field_dm_task_type[LANGUAGE_NONE][0]['value'] = 0;
    }
    else {
      //Task is Inspection
      $node->field_dm_task_type[LANGUAGE_NONE][0]['value'] = 1;
      //Remove costs as task is Inspection.
      $node->field_dm_maintenance_cost[LANGUAGE_NONE][0]['value'] = $node->field_dm_subsequent_cost[LANGUAGE_NONE][0]['value'] = 0;
    }
  }
}

/**
 * return HTML to simplify prority theming.
 */
function _dm_priority_html($p) {
  $output = array();
  for ($i = 0; $i < 3; $i++) {
    if ($i <= $p ) {
      $output[] = '<span class="dm-task-priority dm-task-priority-1"></span>';
    }
    else {
      $output[] = '<span class="dm-task-priority dm-task-priority-0"></span>';
    }
  }
  return implode('', $output);
}

